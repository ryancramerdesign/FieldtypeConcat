<?php

/**
 * ProcessWire Fieldtype that concatenates the values from one or more other fields.
 *
 * Note that this is a runtime-only field and can't be queried via selectors since its value
 * only exists at runtime. 
 *
 * This fieldtype extends FieldtypeText so that it can reuse the TextFormatters 
 * functionality already implemented there. 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FieldtypeConcat extends FieldtypeText {

	public static function getModuleInfo() {
		return array(
			'title' => 'Concat',
			'version' => 105,
			'summary' => 'Concatenates the values from one or more other fields at runtime. For example, you might create a full_name field that combines the values of first_name and last_name.',
			'author' => 'Ryan Cramer',
			);
	}

	public function init() {
		$this->set('concatFields', '');
	}

	/**
	 * Return the fields required to configure an instance of FieldtypeText
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);

		$input = wire('modules')->get('InputfieldText'); 
		$input->attr('name', 'concatFields');
		$input->attr('value', $field->concatFields); 
		$input->label = $this->_('Names of fields to concatenate');
		$input->description = $this->_('Enter one or more field names separated by a space and/or your chosen punctuation. For example: "last_name, first_name". Note that the concatenated value is created from the unformatted version of fields. If you want a formatted version of a field, add an exclamation point after it, like "last_name!". You may also choose to add text formatters to the value after concatenation by selecting one or more text formatters above.'); // Description
		$notes = $this->_('Names of fields in your system:') . ' id, name, path, url, template, template, ';
		foreach(wire('fields') as $f) {
			if($f->id == $field->id) continue; 
			$notes .= $f->name . ', '; 
		}
		$input->notes = rtrim($notes, ', ');
		$inputfields->add($input);
		
		return $inputfields; 
	}

	/**
	 * Create the populated concat string for the given $field on $page
	 *
	 * @return str Non-formatted concat string
	 *
	 */
	protected function makeConcatString(Page $page, Field $field) {

		$str = $field->concatFields;
		$values = array();
		$lengths = array();
		$hashes = array(); 

		// get the values and lengths for each field present in the string
		foreach(wire('fields') as $f) {
			if($f->name == $field->name) continue; 
			if(strpos($str, $f->name) === false) continue; 
			// fieldname plus optional subfield and trailing exclamation point
			if(!preg_match('/\b(' . $f->name . '(\.[-_.a-zA-Z0-9]+)?)\b(!?)/', $str . ' ', $matches)) continue; 
			$fieldName = $matches[1] . $matches[3];
			$lengths[$fieldName] = strlen($fieldName);
		}	

		if(strpos($str, "parent.") !== false && preg_match('/\b(parent\.[-_.a-zA-Z0-9]+)\b(!?)/', $str . ' ', $matches)) {
			$fieldName = $matches[1] . $matches[2]; 	
			$lengths[$fieldName] = strlen($fieldName); 
		}

		if(!count($lengths)) return $str;

		// we sort the values by field name length so that 
		// an str_replace(first_name) occurs before str_replace(name)
		arsort($lengths); 
		
		// create $hashes and $values arrays in field name length order
		foreach($lengths as $fieldName => $length) {
			$hash = '!' . md5($fieldName) . '!';
			$hashes[$fieldName] = $hash;
			if(substr($fieldName, -1) == '!') {
				$fieldName = rtrim($fieldName, '!'); 
				$of = $page->of();
				if(!$of) $page->of(true); 
				$values[$hash] = (string) $page->get($fieldName); 
				if(!$of) $page->of(false);
			} else {
				$values[$hash] = (string) $page->getUnformatted($fieldName);
			}
		}
		
		// first replace the field names with hashed field names.
		// the hashed field names are hopefully values that are very unlikely 
		// to appear in the string, even as real values are populated below.
		$str = str_replace(array_keys($hashes), array_values($hashes), $str);
	
		// now replace hashed field names with field values
		$str = str_replace(array_keys($values), array_values($values), $str); 

		return $str;
	}

	/**
	 * The following functions are defined as replacements to keep this fieldtype out of the DB
	 *
	 */

	public function sanitizeValue(Page $page, Field $field, $value) {
		return $value; 
	}

	public function getInputfield(Page $page, Field $field) {
		$inputfield = wire('modules')->get('InputfieldHidden');
		return $inputfield; 
		// no inputfield necessary
		// return null;
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {
		return $this->makeConcatString($page, $field);
	}

	public function ___sleepValue(Page $page, Field $field, $value) {
		return $this->makeConcatString($page, $field);
	}

	public function getLoadQuery(Field $field, DatabaseQuerySelect $query) {
		// prevent loading from DB
		return $query; 
	}

	public function ___loadPageField(Page $page, Field $field) {
		// generate value at runtime rather than loading from DB
		return $this->makeConcatString($page, $field); 
	}

	public function ___savePageField(Page $page, Field $field) {
		// prevent saving of field
		return true;
	}

	public function ___deletePageField(Page $page, Field $field) {
		// deleting of page field not necessary
		return true; 
	}

	public function ___deleteField(Field $field) {
		// deleting of field not necessary
		return true; 
	}

	public function getDatabaseSchema(Field $field) {
		// no database schema necessary
		return array();
	}

	public function ___createField(Field $field) {
		// nothing necessary to create the field
		return true; 
	}

	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		// we don't allow this field to be queried
		throw new WireException("Field '{$query->field->name}' is runtime and not queryable");
	}
	
	public function ___getCompatibleFieldtypes(Field $field) {
		// no fieldtypes are compatible
		return new Fieldtypes();
	}

	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query) {
		// we don't allow this field to be autojoined
		return null;
	}


}

